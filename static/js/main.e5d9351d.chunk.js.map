{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["marked","setOptions","breaks","App","props","state","input","__html","this","e","setState","target","value","document","getElementById","placeholder","innerHTML","gfm","className","id","onChange","handleChange","bind","type","dangerouslySetInnerHTML","getMarkdownText","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"uSAIAA,IAAOC,WAAW,CAChBC,QAAQ,I,IAGJC,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CACXC,MAAM,IAHS,E,+EASjB,MAAO,CAAEC,OADSP,IAAOQ,KAAKH,MAAMC,U,mCAIzBG,GACXD,KAAKE,SAAS,CACZJ,MAAOG,EAAEE,OAAOC,U,0CAKlBC,SAASC,eAAe,UAAUF,MAAQG,EAC1CF,SAASC,eAAe,WAAWE,UAAYhB,IAAOe,GACtDf,IAAOC,WAAW,CAChBC,QAAQ,EACRe,KAAK,M,+BAKP,OACE,yBAAKC,UAAU,OACb,yBAAKA,UAAU,UACb,uBAAGA,UAAU,kBAAb,UACA,8BACEC,GAAG,SACHD,UAAU,mBACVN,MAAOJ,KAAKH,MAAMO,MAClBQ,SAAUZ,KAAKa,aAAaC,KAAKd,MACjCe,KAAK,UAGT,yBAAKL,UAAU,WACb,uBAAGA,UAAU,mBAAb,WACA,yBACEC,GAAG,UACHD,UAAU,gBACVM,wBAAyBhB,KAAKiB,0B,GA9CxBC,IAAMC,WAsDlBZ,EAAW,8qCA8CFZ,IC3GKyB,QACW,cAA7BC,OAAOC,SAASC,UACa,UAA7BF,OAAOC,SAASC,UAChBF,OAAOC,SAASC,SAASC,MACvB,2DCCJC,IAASC,OAAO,kBAAC,EAAD,MAASrB,SAASC,eAAe,SDyG3C,kBAAmBqB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e5d9351d.chunk.js","sourcesContent":["import React from \"react\";\nimport marked from \"marked\";\nimport \"./App.css\";\n\nmarked.setOptions({\n  breaks: true\n});\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      input: ``\n    };\n  }\n  getMarkdownText() {\n\n    const rawMarkup = marked(this.state.input);\n    return { __html: rawMarkup };\n  }\n\n  handleChange(e) {\n    this.setState({\n      input: e.target.value\n    });\n  }\n\n  componentDidMount() {\n    document.getElementById(\"editor\").value = placeholder;\n    document.getElementById(\"preview\").innerHTML = marked(placeholder);\n    marked.setOptions({\n      breaks: true,\n      gfm: true\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"editor\">\n          <p className=\"editor__header\">Editor</p>\n          <textarea\n            id=\"editor\"\n            className=\"editor__textArea\"\n            value={this.state.value}\n            onChange={this.handleChange.bind(this)}\n            type=\"text\"\n          ></textarea>\n        </div>\n        <div className=\"preview\">\n          <p className=\"preview__header\">Preview</p>\n          <div\n            id=\"preview\"\n            className=\"preview__view\"\n            dangerouslySetInnerHTML={this.getMarkdownText()}\n          ></div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst placeholder = `# Welcome to my React Markdown Previewer!\n\n## This is a sub-heading...\n### And here's some other cool stuff:\n  \nHeres some code, \\`<div></div>\\`, between 2 backticks.\n\n\\`\\`\\`\n// this is multi-line code:\n\nfunction anotherExample(firstLine, lastLine) {\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\n    return multiLineCode;\n  }\n}\n\\`\\`\\`\n  \nYou can also make text **bold**... whoa!\nOr _italic_.\nOr... wait for it... **_both!_**\nAnd feel free to go crazy ~~crossing stuff out~~.\n\nThere's also [links](https://www.freecodecamp.com), and\n> Block Quotes!\n\nAnd if you want to get really crazy, even tables:\n\nWild Header | Crazy Header | Another Header?\n------------ | ------------- | ------------- \nYour content can | be here, and it | can be here....\nAnd here. | Okay. | I think we get it.\n\n- And of course there are lists.\n  - Some are bulleted.\n     - With different indentation levels.\n        - That look like this.\n\n\n1. And there are numbererd lists too.\n1. Use just 1s if you want! \n1. But the list goes on...\n- Even if you use dashes or asterisks.\n* And last but not least, let's not forget embedded images:\n\n![React Logo w/ Text](https://goo.gl/Umyytc)\n`;\nexport default App;\n","\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  window.location.hostname === '[::1]' ||\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        checkValidServiceWorker(swUrl, config);\n\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}